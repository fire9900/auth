basePath: /api/v1
definitions:
  entity.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      role:
        type: string
    required:
    - password
    type: object
host: localhost:8080
info:
  contact: {}
  description: API аутентификации пользователей
  title: sigma Auth API
  version: "6.0"
paths:
  /users:
    get:
      consumes:
      - application/json
      description: Получить список пользователей
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.User'
            type: array
        "400":
          description: Bad Request
          schema:
            type: object
      summary: Получить всех пользователей
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Создать нового пользователя
      parameters:
      - description: Данные пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - ApiKeyAuth: []
      summary: Создать пользователя
      tags:
      - users
  /users/{id}:
    delete:
      description: Удаляет пользователя по ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - ApiKeyAuth: []
      summary: Удалить пользователя
      tags:
      - users
    get:
      consumes:
      - application/json
      description: В url запроса помещается ID пользователя, если он существует, возвращается
        объект пользователя
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
      summary: Найти пользователя по ID
      tags:
      - users
  /users/{id}/check-password:
    post:
      consumes:
      - application/json
      description: Проверяет соответствие пароля пользователя
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      - description: Пароль для проверки
        in: body
        name: password
        required: true
        schema:
          properties:
            password:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
      security:
      - ApiKeyAuth: []
      summary: Проверить пароль
      tags:
      - users
  /users/{id}/password:
    put:
      consumes:
      - application/json
      description: Обновляет пароль пользователя по ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      - description: Новый пароль
        in: body
        name: password
        required: true
        schema:
          properties:
            password:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      security:
      - ApiKeyAuth: []
      summary: Обновить пароль пользователя
      tags:
      - users
  /users/email/{email}:
    get:
      consumes:
      - application/json
      description: В запрос устанавливается email и получается пользователь, если
        он существует
      parameters:
      - description: Email пользователя
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
      summary: Получить пользователя по email
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
